Index: opensync-2.0.5.0/src/lib/datapipeline/src/dppline.c
===================================================================
--- opensync-2.0.5.0.orig/src/lib/datapipeline/src/dppline.c
+++ opensync-2.0.5.0/src/lib/datapipeline/src/dppline.c
@@ -63,6 +63,7 @@ typedef enum
     DPP_T_DEVICE    = 5,
     DPP_T_BS_CLIENT = 6,
     DPP_T_RSSI      = 7,
+    DPP_T_NETWORK_PROBE =8,
 } DPP_STS_TYPE;
 
 uint32_t queue_depth;
@@ -88,6 +89,13 @@ typedef struct
     uint64_t                        timestamp_ms;
 } dppline_client_stats_t;
 
+typedef struct dpp_network_probe_stats
+{
+    dpp_network_probe_record_t      record;
+    uint32_t                        qty;
+    uint64_t                        timestamp_ms;
+} dppline_network_probe_stats_t;
+
 typedef struct
 {
     radio_type_t                    radio_type;
@@ -166,6 +174,7 @@ typedef struct dpp_stats
         dppline_device_stats_t      device;
         dppline_bs_client_stats_t   bs_client;
         dppline_rssi_stats_t        rssi;
+        dppline_network_probe_stats_t        network_probe;
     } u;
 } dppline_stats_t;
 
@@ -219,6 +228,8 @@ static void dppline_free_stat(dppline_st
                 }
                 free(s->u.rssi.list);
                 break;
+            case DPP_T_NETWORK_PROBE:
+                break;
             default:;
         }
 
@@ -605,7 +616,13 @@ static bool dppline_copysts(dppline_stat
                 }
             }
             break;
-
+        case DPP_T_NETWORK_PROBE:
+           {
+                dpp_network_probe_report_data_t *report_data = sts;
+                memcpy(&dst->u.network_probe.record.dns_probe, &report_data->record.dns_probe, sizeof(dpp_dns_metrics_t));
+                dst->u.network_probe.timestamp_ms = report_data->timestamp_ms;
+           }
+           break;
         default:
             LOG(ERR, "Failed to copy %d stats", dst->type);
             /* do nothing */
@@ -1483,6 +1500,44 @@ static void dppline_add_stat_capacity(St
             s->u.capacity.numrec * sizeof(**sr->queue_list)); */
 }
 
+static void dppline_add_stat_network_probe(Sts__Report *r, dppline_stats_t *s)
+{
+    Sts__NetworkProbe *sr = NULL;
+    int size = 0;
+    dppline_network_probe_stats_t *network_probe = &s->u.network_probe;
+
+    // increase the number of devices
+    r->n_network_probe++;
+
+    // allocate or extend the size of devices
+    r->network_probe = realloc(r->network_probe,
+            r->n_network_probe * sizeof(Sts__NetworkProbe*));
+    size += sizeof(Sts__NetworkProbe*);
+
+    // allocate new buffer Sts__Device
+    sr = malloc(sizeof(Sts__NetworkProbe));
+    size += sizeof(Sts__NetworkProbe);
+    assert(sr);
+    r->network_probe[r->n_network_probe - 1] = sr;
+
+    sts__network_probe__init(sr);
+    sr->timestamp_ms = network_probe->timestamp_ms;
+    sr->has_timestamp_ms = true;
+
+    sr->dns_probe = malloc(sizeof(*sr->dns_probe));
+    size += sizeof(*sr->dns_probe);
+    assert(sr->dns_probe);
+    sts__dnsprobe_metric__init(sr->dns_probe);
+    //memcpy(sr->dns_probe->serverip.data, network_probe->record.dns_probe.serverIP, 4);
+    sr->dns_probe->serverip = strdup(network_probe->record.dns_probe.serverIP);
+    size += strlen(network_probe->record.dns_probe.serverIP) + 1;
+    sr->dns_probe->state = network_probe->record.dns_probe.state;
+    sr->dns_probe->has_state = true;
+    sr->dns_probe->latency = network_probe->record.dns_probe.latency;
+    sr->dns_probe->has_latency = true;
+
+}
+
 static void dppline_add_stat_bs_client(Sts__Report * r, dppline_stats_t * s)
 {
     Sts__BSReport *sr = NULL;
@@ -1491,7 +1546,6 @@ static void dppline_add_stat_bs_client(S
     Sts__BSClient__BSEvent *er;
 
     dppline_bs_client_stats_t *bs_client = &s->u.bs_client;
-
     uint32_t client, band, event, band_report;
 
     if (0 == bs_client->qty) {
@@ -1884,6 +1938,9 @@ static void dppline_add_stat(Sts__Report
         case DPP_T_RSSI:
             dppline_add_stat_rssi(r, s);
             break;
+        case DPP_T_NETWORK_PROBE:
+            dppline_add_stat_network_probe(r, s);
+            break;
 
         default:
             LOG(ERR, "Failed to add %d to stats report", s->type);
@@ -2041,6 +2098,14 @@ bool dpp_put_rssi(dpp_rssi_report_data_t
 }
 
 /*
+ * Put network probe stats to internal queue
+ */
+bool dpp_put_network_probe(dpp_network_probe_report_data_t * rpt)
+{
+    return dppline_put(DPP_T_NETWORK_PROBE, rpt);
+}
+
+/*
  * Create the protobuf buff and copy it to given buffer
  */
 #ifndef DPP_FAST_PACK
Index: opensync-2.0.5.0/src/lib/target/inc/target_common.h
===================================================================
--- opensync-2.0.5.0.orig/src/lib/target/inc/target_common.h
+++ opensync-2.0.5.0/src/lib/target/inc/target_common.h
@@ -561,6 +561,11 @@ bool target_stats_scan_get(
 /// @{
 
 /******************************************************************************
+ *  NETWORK PROBE definitions
+ *****************************************************************************/
+bool target_stats_network_probe_get(dpp_network_probe_record_t *network_probe_report);
+
+/******************************************************************************
  *  DEVICE definitions
  *****************************************************************************/
 
Index: opensync-2.0.5.0/src/sm/src/sm.h
===================================================================
--- opensync-2.0.5.0.orig/src/sm/src/sm.h
+++ opensync-2.0.5.0/src/sm/src/sm.h
@@ -155,6 +155,12 @@ bool sm_device_report_request(
         sm_stats_request_t         *request);
 
 /******************************************************************************
+ *  NETWORK PROBE REPORT definitions
+ *****************************************************************************/
+bool sm_network_probe_report_request(
+        sm_stats_request_t         *request);
+
+/******************************************************************************
  *  SURVEY_REPORT definitions
  *****************************************************************************/
 bool sm_survey_report_request(
@@ -264,6 +270,7 @@ typedef enum
     STS_REPORT_ESSID,
     STS_REPORT_DEVICE,
     STS_REPORT_RSSI,
+    STS_REPORT_NETWORK_PROBE,
     STS_REPORT_MAX,
     STS_REPORT_ERROR = STS_REPORT_MAX
 } sm_report_type_t;
Index: opensync-2.0.5.0/src/sm/src/sm_ovsdb.c
===================================================================
--- opensync-2.0.5.0.orig/src/sm/src/sm_ovsdb.c
+++ opensync-2.0.5.0/src/sm/src/sm_ovsdb.c
@@ -61,6 +61,7 @@ char *sm_report_type_str[STS_REPORT_MAX]
     "essid",
     "device",
     "rssi",
+    "network_probe",
 };
 
 #ifndef CONFIG_MANAGER_QM
@@ -357,6 +358,9 @@ bool sm_update_stats_config(sm_stats_con
         case STS_REPORT_RSSI:
             sm_rssi_report_request(&radio->config, &req);
             break;
+	case STS_REPORT_NETWORK_PROBE:
+	sm_network_probe_report_request(&req);
+	break;
         default:
             return false;
     }
Index: opensync-2.0.5.0/src/sm/unit.mk
===================================================================
--- opensync-2.0.5.0.orig/src/sm/unit.mk
+++ opensync-2.0.5.0/src/sm/unit.mk
@@ -43,6 +43,7 @@ UNIT_SRC     += src/sm_survey_report.c
 UNIT_SRC     += src/sm_radio_config.c
 UNIT_SRC     += src/sm_scan_schedule.c
 UNIT_SRC     += src/sm_rssi_report.c
+UNIT_SRC     += src/sm_network_probe_report.c
 UNIT_SRC     += src/sm_common.c
 
 ifeq ($(CONFIG_SM_CAPACITY_QUEUE_STATS),y)
Index: opensync-2.0.5.0/src/lib/datapipeline/inc/dppline.h
===================================================================
--- opensync-2.0.5.0.orig/src/lib/datapipeline/inc/dppline.h
+++ opensync-2.0.5.0/src/lib/datapipeline/inc/dppline.h
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBI
 #include "dpp_client.h"
 #include "dpp_bs_client.h"
 #include "dpp_rssi.h"
+#include "dpp_network_probe.h"
 
 #ifdef CONFIG_MANAGER_QM
 // QM does queue-ing of reports when offline on it's own, so dpp needs
@@ -91,6 +92,11 @@ bool dpp_put_capacity(dpp_capacity_repor
 bool dpp_put_device(dpp_device_report_data_t * rpt);
 
 /*
+ * Insert network probe stats dpp internal queue
+ */
+bool dpp_put_network_probe(dpp_network_probe_report_data_t * rpt);
+
+/*
  * Insert band steering stats into dpp internal queue
  */
 bool dpp_put_bs_client(dpp_bs_client_report_data_t * rpt);
